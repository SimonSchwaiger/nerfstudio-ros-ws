# ROS Version
ARG TAG=ros2_humble_opensource
ARG ROS_DISTRO=humble

# Pull ros-ml-container from container registry
FROM ghcr.io/simonschwaiger/ros-ml-container:${TAG}

# Install additional requirements from local file
RUN rm requirements.txt
ADD ./requirements.txt .
RUN /bin/bash -c "source ~/myenv/bin/activate \
    && pip3 install -r requirements.txt"

#############################
# LEGACY -> Moved to Script #
## Needed for tiny cnn download. Installing from requirements file does not work because torch is not found
# RUN apt-get update && apt-get install -y --no-install-recommends git ffmpeg
# RUN /bin/bash -c "source ~/myenv/bin/activate \
#     && TCNN_CUDA_ARCHITECTURES=89 pip install git+https://github.com/NVlabs/tiny-cuda-nn/#subdirectory=bindings/torch"

# ADD ./install_tiny_cuda_lerf_colmap.sh .
# RUN /bin/bash -c "source ~/myenv/bin/activate \
#     && bash install_tiny_cuda_lerf_colmap.sh"


###########################
# Prerequisites
RUN apt-get update && apt-get install -y --no-install-recommends \
    git \
    cmake \
    ninja-build \
    build-essential \
    libboost-program-options-dev \
    libboost-filesystem-dev \
    libboost-graph-dev \
    libboost-system-dev \
    libeigen3-dev \
    libflann-dev \
    libfreeimage-dev \
    libmetis-dev \
    libgoogle-glog-dev \
    libgtest-dev \
    libsqlite3-dev \
    libglew-dev \
    qtbase5-dev \
    libqt5opengl5-dev \
    libcgal-dev \
    libceres-dev \
    ffmpeg

# Pin numpy and setuptools
RUN /bin/bash -c "source ~/myenv/bin/activate \
    && pip3 install setuptools==69.5.1"

RUN /bin/bash -c "source ~/myenv/bin/activate \
    && pip3 install numpy==1.24.4"

# TCNN 89=Nvidia 40 Series
RUN /bin/bash -c "source ~/myenv/bin/activate \
    && TCNN_CUDA_ARCHITECTURES=89 pip install git+https://github.com/NVlabs/tiny-cuda-nn/#subdirectory=bindings/torch"

# LERF
RUN cd / && git clone https://github.com/kerrj/lerf.git
RUN /bin/bash -c "source ~/myenv/bin/activate \
    && python -m pip install -e /lerf \
    && ns-install-cli"

# COLMAP
RUN cd / && git clone https://github.com/colmap/colmap.git
RUN cd /colmap && mkdir build && cd build \
    && cmake .. -GNinja \
    &&ninja && ninja install
###########################


# Copy ROS packages for compilation in container
COPY ./src/ $ROS2_WS/src/

# Install ros dependencies
RUN apt-get update && rosdep update && rosdep install --from-paths $ROS2_WS/src -i -y --rosdistro $ROS_DISTRO

# Compile workspace (distinguishes between ros 1 and ros 2 build systems)
ARG ROS_DISTRO
RUN /bin/bash -c "source /opt/ros/$ROS_DISTRO/setup.bash && cd $ROS2_WS; \
    if [ '$ROS_DISTRO' = 'noetic' ]; then \
    catkin_make; else \
    colcon build --symlink-install; fi"

# Remove src folder used for compilation, since the real src folder will be mounted at runtime
RUN rm -rf $ROS2_WS/src

# Cleanup
RUN rm -rf /var/lib/apt/lists/*